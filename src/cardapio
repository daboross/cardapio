#!/usr/bin/env python
#
#    Cardapio is an alternative Gnome menu applet, launcher, and much more!
#    Copyright (C) 2010 Thiago Teixeira
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from cardapio import Cardapio, applet_factory

import gtk
import sys
import dbus
import gconf
import gnomeapplet
from dbus.mainloop.glib import DBusGMainLoop

class DockySettingsHelper:
	"""
	Parser of Docky's GConf settings.
	"""

	# GConf root of Docky's settings
	docky_gconf_root = '/apps/docky-2/Docky/Interface/DockPreferences/'
	# list of docks available in settings (Dock1 - Dock6)
	docks = map(lambda x: 'Dock' + str(x), range(1, 7))

	# name of Cardapio's launcher
	cardapio_desktop = 'cardapio.desktop'

	gconf_client = gconf.client_get_default()

	def in_which_dock_am_i(self):
		"""
		Returns the name of the dock in which it finds the launcher for
		Cardapio. If there's none, returns empty string. If there is
		more than one dock, LookupError is raised.
		"""

		found = ''

		for dock in self.docks:
			launchers = self.gconf_client.get_list(self.docky_gconf_root + dock + '/Launchers', 1)
			for launcher in launchers:
				if launcher.endswith(self.cardapio_desktop):
					if found != '':
						raise LookupError
					else:
						found = dock
						break

		return found

	def get_icon_size(self, dock):
		"""
		Returns the IconSize property for chosen dock.
		"""

		return self.gconf_client.get_int(self.docky_gconf_root + dock + '/IconSize')

	def get_zoom_percentage(self, dock):
		"""
		Returns the ZoomPercent property for chosen dock if zoom is
		enabled (ZoomEnabled). If not, returns neutral scaling
		factor (number 1).
		"""

		if(self.gconf_client.get_bool(self.docky_gconf_root + dock + '/ZoomEnabled')):
			return self.gconf_client.get_float(self.docky_gconf_root + dock + '/ZoomPercent')
		else:
			return 1

	def get_position(self, dock):
		"""
		Returns the Position property for chosen dock.
		"""

		return self.gconf_client.get_string(self.docky_gconf_root + dock + '/Position')


	def get_horizontal_offset(self, dock):
		"""
		Returns the horizontal offset necessary to avoid overlapping of Cardapio launchers'
		tooltip	with Cardapio's window. The offset depends on whether the dock is in panel
		mode.
		"""

		return 10 if self.gconf_client.get_bool(self.docky_gconf_root + dock + '/PanelMode') else 20

	def get_vertical_offset(self, dock):
		"""
		Returns the vertical offset necessary to avoid overlapping of Cardapio launchers'
		tooltip	with Cardapio's window. The offset depends on whether the dock is in panel
		mode.
		"""

		return 30 if self.gconf_client.get_bool(self.docky_gconf_root + dock + '/PanelMode') else 60


# main
DBusGMainLoop(set_as_default=True)
bus = dbus.SessionBus()
bus_request_name = bus.request_name(Cardapio.bus_name_str)

# relying on three command line arguments here breaks Cardapio as an
# applet; instead we look for "mini-mode" explicitly
mini_mode = sys.argv.count('mini-mode') > 0
if len(sys.argv) == 2 or mini_mode:

	if sys.argv[1] == 'run-in-window':

		# open new Cardapio instance
		main_window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		main_window.set_title('Cardapio')
		main_window.connect('destroy', gtk.main_quit)
		app = gnomeapplet.Applet()
		applet_factory(app, None)
		app.reparent(main_window)
		main_window.show_all()
		gtk.gdk.threads_enter()
		gtk.main()
		gtk.gdk.threads_leave()


	elif sys.argv[1] == 'hidden':

		# if there's no other instance - start hidden Cardapio
		if bus_request_name == dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
			del bus
			Cardapio(hidden = True, mini_mode = mini_mode)
			gtk.gdk.threads_enter()
			gtk.main()
			gtk.gdk.threads_leave()


	elif sys.argv[1] == 'show' or sys.argv[1] == 'show-near-mouse':

		# if there's no other instance - start Cardapio
		if bus_request_name == dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
			del bus
			Cardapio(mini_mode = mini_mode)
			gtk.gdk.threads_enter()
			gtk.main()
			gtk.gdk.threads_leave()

		# if there is - "show / hide" it or "show / hide" it near the
		# mouse pointer
		else:
			if sys.argv[1] == 'show-near-mouse':
				show_hide = bus.get_object(Cardapio.bus_name_str, Cardapio.bus_obj_str).get_dbus_method('show_hide_near_mouse')
			else:
				show_hide = bus.get_object(Cardapio.bus_name_str, Cardapio.bus_obj_str).get_dbus_method('show_hide')

			show_hide()


	elif sys.argv[1] == 'docky-mode':

		# if there's no other instance - start hidden Cardapio
		if bus_request_name == dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
			del bus
			Cardapio(hidden = True, mini_mode = mini_mode)
			gtk.gdk.threads_enter()
			gtk.main()
			gtk.gdk.threads_leave()

		# if there is - "show / hide" it near the proper side of the
		# screen
		else:
			launcher_error = "you should have exactly one Cardapio launcher on Docky's docks!"

			show_hide = bus.get_object(Cardapio.bus_name_str, Cardapio.bus_obj_str).get_dbus_method('show_hide_near')

			try:
				settings_helper = DockySettingsHelper()
				dock_num = settings_helper.in_which_dock_am_i()

				if dock_num != '':

					# properties of our dock
					icon_size = settings_helper.get_icon_size(dock_num)
					zoom_percent = settings_helper.get_zoom_percentage(dock_num)
					position = settings_helper.get_position(dock_num)

					# mouse position and screen size
					mouse_x, mouse_y, dummy = gtk.gdk.get_default_root_window().get_pointer()
					screen_width, screen_height = gtk.gdk.screen_width(), gtk.gdk.screen_height()

					# offsets from screen's borders
					horizontal_offset = settings_helper.get_horizontal_offset(dock_num)
					vertical_offset = settings_helper.get_vertical_offset(dock_num)

					# calculating final position...
					if position == 'Bottom':
						x = mouse_x
						y = screen_height - (icon_size * zoom_percent + vertical_offset)
					elif position == 'Top':
						x = mouse_x
						y = icon_size * zoom_percent + vertical_offset
					elif position == 'Left':
						x = icon_size * zoom_percent + horizontal_offset
						y = mouse_y
					elif position == 'Right':
						x = screen_width - (icon_size * zoom_percent + horizontal_offset)
						y = mouse_y

					show_hide(x, y)
				else:

					# doesn't work if we haven't found the launcher at all
					print launcher_error

			except LookupError:
				# doesn't work if we've found the launcher on more than one dock
				print launcher_error

else:

	# make sure Cardapio shows even if using Ubuntu's AppMenu
	import os
	os.environ['UBUNTU_MENUPROXY'] = ''

	gnomeapplet.bonobo_factory('OAFIID:GNOME_Cardapio_Factory',
			gnomeapplet.Applet.__gtype__, 'Cardapio', '0', applet_factory)