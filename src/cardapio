#!/usr/bin/env python
#
#    Cardapio is an alternative Gnome menu applet, launcher, and much more!
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from cardapio import Cardapio, fatal_error

import os
import sys
import gtk
import dbus
import gnomeapplet
from dbus.mainloop.glib import DBusGMainLoop

def start_cardapio(show):
	Cardapio(show = show)
	gtk.gdk.threads_enter()
	gtk.main()
	gtk.gdk.threads_leave()

# main
DBusGMainLoop(set_as_default=True)
bus = dbus.SessionBus()
bus_request_name = bus.request_name(Cardapio.bus_name_str)

# make sure Cardapio shows even if using Ubuntu's AppMenu
os.environ['UBUNTU_MENUPROXY'] = ''

if len(sys.argv) == 2:

	if sys.argv[1] == 'run-in-window':

		from cardapio import AppletFactory

		# open new Cardapio instance
		main_window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		main_window.set_title('Cardapio')
		main_window.connect('destroy', gtk.main_quit)
		app = gnomeapplet.Applet()
		AppletFactory(app, None)
		app.reparent(main_window)
		main_window.show_all()
		gtk.gdk.threads_enter()
		gtk.main()
		gtk.gdk.threads_leave()


	elif sys.argv[1] == 'hidden':

		# if there's no other instance, start hidden Cardapio
		if bus_request_name == dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
			start_cardapio(show = Cardapio.DONT_SHOW)


	elif sys.argv[1] == 'show' or sys.argv[1] == 'show-near-mouse':

		# if there's no other instance - start Cardapio
		if bus_request_name == dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
			if sys.argv[1] == 'show-near-mouse':
				start_cardapio(show = Cardapio.SHOW_NEAR_MOUSE)
			else:
				start_cardapio(show = Cardapio.SHOW_CENTERED)

		# if there is - "show / hide" it or "show / hide" it near the
		# mouse pointer
		else:
			if sys.argv[1] == 'show-near-mouse':
				show_hide = bus.get_object(Cardapio.bus_name_str, Cardapio.bus_obj_str).get_dbus_method('show_hide_near_mouse')
			else:
				show_hide = bus.get_object(Cardapio.bus_name_str, Cardapio.bus_obj_str).get_dbus_method('show_hide')

			show_hide()


	elif sys.argv[1] == 'docky-mode':

		# if there's no other instance - start hidden Cardapio
		if bus_request_name == dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
			start_cardapio(show = Cardapio.DONT_SHOW)

		# if there is - "show / hide" it near the proper side of the
		# screen
		else:
			from docky.DockySettingsHelper import *

			show_hide = bus.get_object(Cardapio.bus_name_str, Cardapio.bus_obj_str).get_dbus_method('show_hide_near_point')

			try:
				settings_helper = DockySettingsHelper()
				dock_num = settings_helper.get_dock_for_this_helper()

				x, y = settings_helper.get_best_position(dock_num)
				show_hide(x, y)

			except LauncherError:
				# doesn't work if we didn't find the launcher or found it on more
                # than one dock
				fatal_error('Cardapio error!', 'You should have exactly one Cardapio launcher on your docks.')

else:

	from cardapio import AppletFactory

	gnomeapplet.bonobo_factory('OAFIID:GNOME_Cardapio_Factory', 
			gnomeapplet.Applet.__gtype__, 'Cardapio', '0', AppletFactory)

